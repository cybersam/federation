{"name":"Federation","tagline":"A Federated Message Network in Node.js","body":"![Awesome Picard Meme](http://i.imgur.com/T5kIkxX.jpg)\r\n\r\n# Introduction\r\n\r\n> Federation is a federated message network for distributed environments\r\n\r\nFederation is inspired by Akka and Erlang,\r\nand borrows some semantics from the actor model.\r\nWhile there _are_ actors,\r\nmany features familiar to Akka and Erlang are not included.\r\nFederation prioritizes being useful to the Node.js community\r\nover being faithful to the pure actor model.\r\n\r\nFederation considers cross-process and cross-host messaging to be the top priority. \r\nIt has been designed to sit _above_ an application protocol like `axon` or `http`, and can be extended to any other protocol quite easily.\r\n\r\n# Contributors\r\n\r\nA good module evolves to meet the needs of the community.\r\nThere are many ways you can help.\r\nPull-requests are always welcome, but you don't have to be a programming expert to lend a hand.\r\n\r\n1. [ask a question](https://github.com/jacobgroundwater/federation/issues/new) about using federation, your question may help others\r\n2. [suggest an enhancement](https://github.com/jacobgroundwater/federation/issues/new), suggestions can help prioritize features\r\n3. [tell us your success stories](https://github.com/jacobgroundwater/federation/wiki/Success-Stories), how have you used federation, and what tips do you have for others?\r\n\r\n# Install\r\n\r\n    $ npm install federation\r\n\r\n# Usage\r\n\r\nEvery actor has a name, and can receive messages at that name.\r\n\r\n```javascript\r\nvar director = require('federation').init().director;\r\n    \r\nvar actorBob = director.createActor('bob');\r\nvar actorTom = director.createActor('tom');\r\n```\r\n\r\n## Send a Message\r\n\r\nFederation nodes can send and receive messages to each other.\r\nActors `tell` each other messages with:\r\n\r\n```javascript\r\nactorBob.tell('tom','Good Morning');\r\n```\r\n\r\nTelling a message is a fire-and-forget approach.\r\n\r\n## Receive Messages\r\n\r\nActors receive messages by binding a callback to their `onMessage` property:\r\n\r\n```javascript\r\nactorTom.onMessage = function(message){\r\n  console.log('Got Message:', message);\r\n}\r\n```\r\n\r\nThe callback will be invoked as a method, so `this` resolves to the actor object.\r\n\r\n```javascript\r\nactorTom.onMessage = function(message){\r\n  this.tell('joe','Got Message!');\r\n}\r\n```\r\n## Request-Reply Pattern\r\n\r\nActors can also `ask` other actors questions that will receive replies.\r\n\r\n```javascript\r\nactorBob.ask('tom','Are you happy?',function(err,happy){\r\n  if(err) return console.log('Error Asking Tom:',err);\r\n  if(happy){\r\n    console.log('Tom is Happy');\r\n  }else{\r\n    console.log('Tom is Not Happy');\r\n  }\r\n});\r\n```\r\n\r\nThe request-reply pattern uses anonymous actors known as **extras**.\r\nAn extra has a limited life span of `5000` by default.\r\nIf the timeout occurs before a reply is delivered,\r\na `TIMEOUT` error will be send to your callback.\r\n\r\n# Routing\r\n\r\nFederation supports inter-process communication,\r\nand abstracts the details away from the programmer.\r\n\r\nActors have names, any name you like.\r\nThe nameing convention is up to you,\r\nbut choosing a good convention will make routing easier.\r\nEach process has its own router and routing table.\r\nSince messages are addressed to other actors by name,\r\nthe router matches names to URLs.\r\nOnce a match is found, the message is sent to the remote process.\r\n\r\n![Routing](https://raw.github.com/jacobgroundwater/federation/assets/export/federation.png)\r\n\r\nRouters have a default local route.\r\nAny message matching the default route will be delivered locally.\r\nAdditional routes can be defined in a JSON-encoded routes file:\r\n\r\n```json\r\n[\r\n  {\r\n    \"regex\": \"hadoop/.*\",\r\n    \"address\": \"axon://10.0.1.12/\"\r\n  },\r\n  {\r\n    \"regex\": \"mongo/.*\",\r\n    \"address\": \"axon://10.0.1.122/\"\r\n  }\r\n]\r\n```\r\n\r\nIncoming messages are matched in-order against the `regex` key.\r\nThe first match wins, and the packet is forwarded to the gateway at the destination address.\r\nThe default route will always be matched last.\r\n\r\nThe easiest way to add a routes file is by setting the `table_file` key:\r\n\r\n```javascript\r\nvar federation = require('federation');\r\nfederation.defaults.table_file = process.env.ROUTES_FILE_PATH;\r\nvar director = federation.init().director;\r\n```\r\n\r\nSee the example in [Multi-Proc Example](https://github.com/jacobgroundwater/federation/tree/master/examples/multi-proc) for two-process routing table.\r\nRoutes can be the same, or different hosts.\r\n\r\n# Documentation\r\n\r\nComprehensive documentation is kept in the [wiki](https://github.com/jacobgroundwater/federation/wiki).\r\n\r\nThe wiki is open to anyone for improvement.\r\nFeel free to make constructive edits.\r\nIf you are not sure about making a change,\r\nplease ask first on the [issue tracker](https://github.com/jacobgroundwater/federation/issues/new).\r\n\r\n# Todo\r\n\r\nThe todo list is maintained under the [issue tracker](https://github.com/jacobgroundwater/federation/issues?labels=enhancement&page=1&state=open)\r\n\r\n# License\r\n\r\nCopyright (c) 2013 Jacob Groundwater (groundwater@gmail.com)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","google":"UA-25329958-3","note":"Don't delete this file! It's used internally to help with page regeneration."}